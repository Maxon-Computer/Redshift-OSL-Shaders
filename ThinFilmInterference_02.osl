shader ThinFilmInterference(
    float thickness=0,
    float ior=1.5,
    float incoming_ior=1.0,
    float outgoing_ior=1.5,
    int samples = 8,
    output color outColor=0,
    output float outFresnel=1
)
{

    float eta = incoming_ior / ior;
    float k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));
    color result = color(0);

    if (k > 0){
        normal T = eta * I - N * (eta * dot(N,I) + sqrt(k));
        float factor = 1 / samples;
        float cos_t1 = dot(I, N);
        float cos_t2 = dot(T, N);

        float fresnel_s = (incoming_ior * cos_t1 - ior * cos_t2) / (incoming_ior * cos_t1 + ior * cos_t2);
        fresnel_s *= fresnel_s;
        float fresnel_p = (incoming_ior * cos_t2 - ior * cos_t1) / (incoming_ior * cos_t2 + ior * cos_t1);
        fresnel_p *= fresnel_p;
        outFresnel = 0.5 * (fresnel_s + fresnel_p);
        float opd = 2 * ior * thickness * cos_t2;


        for(int m = -samples; m <= samples; m++){
            float rnd = noise("hash", P, time + m);
            float w = mix(300, 800, rnd);

            float phase_shift = abs(2 * (mod(opd, w) / w - 0.5));

            result += mix(0, 2 * wavelength_color(w), phase_shift) + color(0.01);
        }

        result /= samples;
    }

    outColor = result;
}